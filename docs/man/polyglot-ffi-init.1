.TH POLYGLOT-FFI-INIT 1 "2025-01-22" "v0.4.1" "Polyglot FFI Manual"
.SH NAME
polyglot-ffi-init \- Initialize a new polyglot FFI project
.SH SYNOPSIS
.B polyglot-ffi init
[\fIoptions\fR] \fIproject-name\fR
.SH DESCRIPTION
Creates a new polyglot FFI project with the specified name and target
languages. Generates a complete project structure including:
.IP \(bu 2
Project configuration file (polyglot.toml)
.IP \(bu 2
Source directories for OCaml interface files
.IP \(bu 2
Example interface file (.mli)
.IP \(bu 2
README with quickstart guide
.IP \(bu 2
Makefile for common tasks
.SH OPTIONS
.TP
.B project-name
Name of the project to create (required)
.TP
.B \-l, \-\-lang LANGUAGE
Target language(s) for bindings. Can be specified multiple times.
Supported: python, rust, go. Default: python
.TP
.B \-o, \-\-output PATH
Output directory for the project. Default: ./project-name
.TP
.B \-\-no-examples
Skip creating example files
.TP
.B \-f, \-\-force
Overwrite existing directory if it exists
.TP
.B \-v, \-\-verbose
Enable verbose output showing detailed initialization progress
.TP
.B \-h, \-\-help
Show help message and exit
.SH PROJECT STRUCTURE
The init command creates the following structure:
.EX
project-name/
├── polyglot.toml          # Configuration file
├── README.md              # Project documentation
├── Makefile               # Build automation
├── src/
│   └── example.mli        # Example OCaml interface
└── lib/
    └── example.ml         # Example OCaml implementation
.EE
.SH EXAMPLES
.TP
Create a Python project:
.EX
$ polyglot-ffi init my-crypto --lang python
.EE
.TP
Create a multi-language project:
.EX
$ polyglot-ffi init my-lib --lang python --lang rust
.EE
.TP
Create project in a specific directory:
.EX
$ polyglot-ffi init crypto --output ~/projects/crypto-bindings
.EE
.TP
Overwrite existing directory:
.EX
$ polyglot-ffi init my-project --force
.EE
.SH FILES
.TP
.B polyglot.toml
Generated configuration file containing project metadata and bindings settings
.TP
.B src/example.mli
Example OCaml interface file demonstrating supported types
.TP
.B lib/example.ml
Example OCaml implementation
.SH EXIT STATUS
.TP
.B 0
Success - project created
.TP
.B 1
Error - directory already exists (use --force to overwrite)
.TP
.B 2
Configuration error
.SH SEE ALSO
.BR polyglot-ffi (1),
.BR polyglot-ffi-generate (1),
.BR polyglot-ffi-config (5)
.SH NOTES
After running init, edit the generated .mli file with your actual functions,
then run \fBpolyglot-ffi generate\fR to create bindings.
