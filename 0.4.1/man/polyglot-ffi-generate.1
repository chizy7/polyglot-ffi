.TH POLYGLOT-FFI-GENERATE 1 "2025-10-23" "v0.4.1" "Polyglot FFI Manual"
.SH NAME
polyglot-ffi-generate \- Generate FFI bindings from interface files
.SH SYNOPSIS
.B polyglot-ffi generate
[\fIoptions\fR] \fIinterface-file\fR
.SH DESCRIPTION
Parses an OCaml interface file (.mli) and generates complete FFI bindings
including:
.IP \(bu 2
OCaml ctypes type descriptions
.IP \(bu 2
OCaml ctypes function descriptions
.IP \(bu 2
Memory-safe C wrapper code (stubs)
.IP \(bu 2
C header files
.IP \(bu 2
Target language wrappers (Python, Rust, etc.)
.IP \(bu 2
Build system configurations (Dune, Cargo, etc.)
.SH OPTIONS
.TP
.B interface-file
Path to OCaml interface file (.mli) to process (required)
.TP
.B \-o, \-\-output PATH
Output directory for generated files. Default: ./generated
.TP
.B \-n, \-\-name NAME
Module name for generated bindings. Default: derived from filename
.TP
.B \-l, \-\-lang LANGUAGE
Target language (python, rust, go). Can be specified multiple times.
Default: python
.TP
.B \-\-dry-run
Show what would be generated without writing files
.TP
.B \-f, \-\-force
Overwrite existing generated files
.TP
.B \-c, \-\-config PATH
Path to configuration file. Default: ./polyglot.toml
.TP
.B \-h, \-\-help
Show help message and exit
.SH GENERATED FILES
For an interface file \fBcrypto.mli\fR, the following files are generated:
.TP
.B type_description.ml
OCaml ctypes type descriptions
.TP
.B function_description.ml
OCaml ctypes function bindings
.TP
.B stubs.c
C wrapper functions with CAMLparam/CAMLreturn
.TP
.B stubs.h
C header file
.TP
.B crypto_py.py
Python wrapper module (if target is Python)
.TP
.B dune
Dune build configuration
.TP
.B dune-project
Dune project configuration
.SH SUPPORTED TYPES
.SS Primitive Types
.IP \(bu 2
.B string
\- String type
.IP \(bu 2
.B int
\- Integer type
.IP \(bu 2
.B float
\- Floating point type
.IP \(bu 2
.B bool
\- Boolean type
.IP \(bu 2
.B unit
\- Unit/void type
.SS Complex Types
.IP \(bu 2
.B 'a option
\- Optional values
.IP \(bu 2
.B 'a list
\- Lists
.IP \(bu 2
.B 'a * 'b
\- Tuples
.IP \(bu 2
.B record types
\- Named fields
.IP \(bu 2
.B variant types
\- Sum types
.SH EXAMPLES
.TP
Generate Python bindings from crypto.mli:
.EX
$ polyglot-ffi generate crypto.mli
.EE
.TP
Generate bindings with custom output directory:
.EX
$ polyglot-ffi generate crypto.mli --output bindings/ --name crypto
.EE
.TP
Generate multi-language bindings:
.EX
$ polyglot-ffi generate api.mli --lang python --lang rust
.EE
.TP
Dry run to preview what would be generated:
.EX
$ polyglot-ffi generate crypto.mli --dry-run
.EE
.TP
Force overwrite existing bindings:
.EX
$ polyglot-ffi generate crypto.mli --force
.EE
.SH EXIT STATUS
.TP
.B 0
Success - bindings generated
.TP
.B 1
Parse error (invalid .mli syntax or unsupported types)
.TP
.B 2
Generation error (failed to write output files)
.TP
.B 3
Configuration error
.SH DIAGNOSTICS
The generator provides detailed error messages with:
.IP \(bu 2
File name and line number for parse errors
.IP \(bu 2
Type suggestions for unsupported types
.IP \(bu 2
Syntax fix suggestions
.IP \(bu 2
Rich formatted output with colors
.SH SEE ALSO
.BR polyglot-ffi (1),
.BR polyglot-ffi-init (1),
.BR polyglot-ffi-watch (1),
.BR polyglot-ffi-config (5)
.SH NOTES
After generation, integrate the generated files into your build system using
the generated dune configuration or Makefile.
