"""
OCaml Ctypes bindings generator.
"""

from typing import Dict

from polyglot_ffi.ir.types import IRModule, IRType, TypeKind


class CtypesGenerator:
    """Generate OCaml ctypes binding code."""

    # Map IR primitive types to Ctypes types
    TYPE_MAP: Dict[str, str] = {
        "string": "string",
        "int": "int",
        "float": "double",
        "bool": "bool",
        "unit": "void",
    }

    def generate_type_description(self, module: IRModule) -> str:
        """
        Generate type_description.ml.

        Phase 1: Basic boilerplate only (no complex types).
        """
        return """(* Generated by polyglot-ffi *)
open Ctypes

module Types (F : Ctypes.TYPE) = struct
  (* Type descriptions go here if needed for complex types *)
  (* Phase 1: Only primitives, no custom types needed *)
end
"""

    def generate_function_description(self, module: IRModule) -> str:
        """
        Generate function_description.ml with foreign function declarations.
        """
        lines = [
            "(* Generated by polyglot-ffi *)",
            "open Ctypes",
            "",
            "module Functions (F : Ctypes.FOREIGN) = struct",
        ]

        for func in module.functions:
            # Generate foreign function declaration
            lines.append(f"  let {func.name} =")
            lines.append(f'    F.foreign "ml_{func.name}"')

            # Build the ctypes signature
            sig_parts = []

            # Add parameter types
            for param in func.params:
                ctype = self._get_ctype(param.type)
                sig_parts.append(ctype)

            # Add return type
            return_ctype = self._get_ctype(func.return_type)

            # Construct the signature
            sig_line = "      ("
            if sig_parts:
                sig_line += " @-> ".join(sig_parts) + " @-> "
            sig_line += f"returning {return_ctype})"

            lines.append(sig_line)
            lines.append("")

        lines.append("end")

        return "\n".join(lines)

    def _get_ctype(self, ir_type: IRType) -> str:
        """Convert IR type to Ctypes type string."""
        if ir_type.is_primitive():
            return self.TYPE_MAP.get(ir_type.name, "string")

        # Phase 1: Only primitives
        raise ValueError(f"Unsupported type for Ctypes generation: {ir_type}")
